// Keywords: nucleotide-based, nucleotide sequence

initialize() {
	defineConstant("L", CHR_LENGTH);
	initializeSLiMOptions(nucleotideBased=T);
	setSeed(REP_ID);
	initializeAncestralNucleotides(randomNucleotides(L));
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
	initializeMutationTypeNuc("m2", 0.5, "f", 0.5);
	initializeGenomicElementType("g1", m1, 1.0, mmJukesCantor(MUTATION_RATE));
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(REC_RATE);
}
1 {	
	// Output acestral sequence in fasta format
	header = ">rep_" + REP_ID;
	sequence = sim.chromosome.ancestralNucleotides();
	writeFile(OUT_PATH + "rep_" + REP_ID + "/slim/ancestral.fasta", header, append=F);
	writeFile(OUT_PATH + "rep_" + REP_ID + "/slim/ancestral.fasta", sequence, append=T);
	sim.addSubpop("p1", POP_SIZE);
	sim.addSubpop("p2", POP_SIZE);
	p1.setMigrationRates(p2, MIGRATION_RATE);
	p2.setMigrationRates(p1, MIGRATION_RATE);

}
fitness(m2, p2) { return 1/relFitness; }
10000 late() {
// Output sampled haplotypes
	for (sample_id in 1:SAMPLE_SIZE) {
		g = p1.genomes[sample_id-1];
		header = ">rep_" + REP_ID;
		sequence = g.nucleotides();
		writeFile(OUT_PATH + "rep_" + REP_ID + "/fasta/p1_derived_" + sample_id + ".fasta", header, append=F);
		writeFile(OUT_PATH + "rep_" + REP_ID + "/fasta/p1_derived_" + sample_id + ".fasta", sequence, append=T);
		g = p2.genomes[sample_id-1];
		header = ">rep_" + REP_ID;
		sequence = g.nucleotides();
		writeFile(OUT_PATH + "rep_" + REP_ID + "/fasta/p2_derived_" + sample_id + ".fasta", header, append=F);
		writeFile(OUT_PATH + "rep_" + REP_ID + "/fasta/p2_derived_" + sample_id + ".fasta", sequence, append=T);
	}
	
	// Output population-level allele frequencies
	sim.outputMutations(sim.mutationsOfType(m1), OUT_PATH + "rep_" + REP_ID + "/slim/mutations.txt");
	sim.outputFixedMutations(OUT_PATH + "rep_" + REP_ID + "/slim/substitutions.txt");
}
