// Keywords: nucleotide-based, nucleotide sequence

initialize() {
	defineConstant("L", CHR_LENGTH);
	initializeSLiMOptions(nucleotideBased=T);
	setSeed(REP_ID);
	initializeAncestralNucleotides(randomNucleotides(L));
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0, mmJukesCantor(MUTATION_RATE));
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(REC_RATE);
}
1 {	
	// Output acestral sequence in fasta format
	header = ">ancestral";
	sequence = sim.chromosome.ancestralNucleotides();
	writeFile(OUT_PATH + "rep_" + REP_ID + "/ancestral.fasta", header, append=F);
	writeFile(OUT_PATH + "rep_" + REP_ID + "/ancestral.fasta", sequence, append=T);
	sim.addSubpop("p1", POP_SIZE);
}
10000 late() {
	catn("Fixed:     " + paste(sim.substitutions.nucleotide));
	catn("positions: " + paste(sim.substitutions.position));
	catn();
		
	catn("SNPs:      " + paste(sim.mutations.nucleotide));
	catn("positions: " + paste(sim.mutations.position));
	catn();
	
	// Output sampled haplotypes
	for (sample_id in 1:SAMPLE_SIZE) {
		g = p1.genomes[sample_id-1];
		header = ">derived_" + sample_id;
		sequence = g.nucleotides();
		writeFile(OUT_PATH + "rep_" + REP_ID + "/derived_" + sample_id + ".fasta", header, append=F);
		writeFile(OUT_PATH + "rep_" + REP_ID + "/derived_" + sample_id + ".fasta", sequence, append=T);
	}
	
	// Output population-level allele frequencies
	sim.outputMutations(sim.mutationsOfType(m1), OUT_PATH + "rep_" + REP_ID + "/mutations.txt");
	sim.outputFixedMutations(OUT_PATH + "rep_" + REP_ID + "/substitutions.txt");
}
